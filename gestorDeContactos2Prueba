#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h> // Incluir la librería para usar bool y true/false
#include "listaEnlazada.h"

#define RUTA_ARCHIVO "D:\\Licenciatura En Sistemas de Informacion\\LSI 2023\\Algoritmo y Estructura de Datos 2\\Proyecto integrador"
#define MAX_USUARIOS 10
#define MAX_LONGITUD_NOMBRE 50
#define MAX_RUTA 500

typedef struct{
	tString nombreUsuario;
	tListaContacto* listaContacto;
}tUsuario;

void agregarContacto(tListaContacto** , tInfoContacto);
void guardarListaEnArchivo(tListaContacto* , const char* );
tListaContacto* leerListaDesdeArchivo(const char* );
void ingresarUsuarioExistente();
void crearNuevoUsuario();
void registrarNuevoContacto();
void mostrarListaContactos(tListaContacto*);
void eliminarContacto(tListaContacto*);
void menu();
void menuUsuario();
void cambiarUsuario();
bool archivoExiste(const char* );

tUsuario usuarios[MAX_USUARIOS];
char nombreIngresado[MAX_LONGITUD_NOMBRE];
int cantidadContactos, usuarioActual = -1;


int main(){
	menu();
	return 0;
}

void menu(){
	int opcion;
	tListaContacto* listaContactoActual = usuarios[usuarioActual].listaContacto;
	
	do{
		printf("\n---- MENU PRINCIPAL ----\n");
		printf("1. Ingresar como usuario existente\n");
		printf("2. Crear nuevo usuario\n");
		printf("3. salir\n");
		printf("Opcion: ");
		scanf("%d", &opcion);
		
		switch(opcion){
			case 1:
				ingresarUsuarioExistente();
				break;
			case 2:
				crearNuevoUsuario();
				break;
			case 3:
				guardarListaEnArchivo(listaContactoActual, nombreIngresado);
				printf("\nSaliendo del programa... \n");
				break;
			default:
				printf("\nOpcion invalida. Intente de nuevo.\n");
				break;
		}
		if(usuarioActual != -1){
			printf("\nBandera 5");
			menuUsuario();
		}
		
	}while(opcion != 3);
}


void ingresarUsuarioExistente(){
    printf("\nIngrese su nombre de usuario: ");
    scanf("%s", nombreIngresado);
    
    int encontrado = 0;
    for(int i = 0; i < MAX_USUARIOS; i++){
        if(strcmp(usuarios[i].nombreUsuario, nombreIngresado) == 0){
            printf("\nInicio de sesion exitoso como %s.\n", usuarios[i].nombreUsuario);
            usuarioActual = i; // Actualizamos el usuario actual
            encontrado = 1;
            break;
        }
    }
    
    if(!encontrado){
        printf("\nUsuario no encontrado.\n");
    }
}


void crearNuevoUsuario(){
    printf("\nIngrese su nombre de usuario: ");
    scanf("%s", usuarios[cantidadContactos].nombreUsuario);
    printf("\nUsuario creado exitosamente como %s.\n", usuarios[cantidadContactos].nombreUsuario);
    usuarioActual = cantidadContactos; // Establecer el nuevo usuario como usuario actual
    
    // Inicializar la lista de contactos del nuevo usuario
    usuarios[cantidadContactos].listaContacto = malloc(sizeof(tListaContacto));
    if (usuarios[cantidadContactos].listaContacto == NULL) {
        printf("Error al asignar memoria para la lista de contactos.\n");
        exit(EXIT_FAILURE);
    }
    usuarios[cantidadContactos].listaContacto->datosContacto.id = -1; // Valor de inicialización
    usuarios[cantidadContactos].listaContacto->siguiente = NULL; // Establecer la lista como vacía

    printf("\nBandera 1\n");
    cantidadContactos++;
    printf("\nBandera 3\n");
}



void menuUsuario(){
	printf("\nBandera 6\n");
    tListaContacto* listaContactoActual = usuarios[usuarioActual].listaContacto;
    
    if (listaContactoActual == NULL) {
        printf("\nLa lista de contactos esta vacia o no ha sido inicializada.\n");
        return;
    }
	printf("\nBandera 7\n");
    tInfoContacto infoContactoNuevo = listaContactoActual->datosContacto;
    printf("\nBandera 8\n");
	int opcion;
	do{
		printf("\n--- MENU ---\n");
			printf("1. Agregar contacto\n");
			printf("2. Guardar lista en archivo\n");
			printf("3. Recuperar lista desde archivo\n");
			printf("4. Ver lista de contactos\n");
			printf("5. Eliminar contacto\n");
			printf("6. Cambiar usuario\n");
			printf("7. Salir\n");
			printf("Usuario actual: %s\n", usuarios[usuarioActual].nombreUsuario);
			printf("Opcion: ");
			scanf("%d", &opcion);
			
			switch(opcion){
				case 1:
					registrarNuevoContacto();
					break;
				case 2:
					guardarListaEnArchivo(listaContactoActual, "contactos.dat");
                    printf("\nLista de contactos guardada en archivo 'contactos.dat'.\n");
                    break;
				case 3:
					usuarios[usuarioActual].listaContacto = leerListaDesdeArchivo("contactos.dat");
                    printf("\nLista de contactos recuperada desde archivo 'contactos.dat'.\n");
                    break;
				case 4:
					visualizarContactos(listaContactoActual, &infoContactoNuevo);
					break;
				case 5:
					eliminarContacto(listaContactoActual);
					break;
				case 6:
					cambiarUsuario();
                    break;
				case 7:
					printf("\nSaliendo del programa....\n");
				default:
					printf("\nOpcion invalida. Intente de nuevo.\n");
					break;
			}
	}while(opcion != 7);
}

void agregarContacto(tListaContacto** lista, tInfoContacto nuevoContacto) {
    tListaContacto* nuevoNodo = malloc(sizeof(tListaContacto));
    if (nuevoNodo == NULL) {
        printf("Error al asignar memoria para el nuevo nodo.\n");
        exit(EXIT_FAILURE);
    }

    nuevoNodo->datosContacto = nuevoContacto;
    nuevoNodo->siguiente = NULL;

    if (*lista == NULL) {
        *lista = nuevoNodo;
    } else {
        tListaContacto* aux = *lista;
        while (aux->siguiente != NULL) {
            aux = aux->siguiente;
        }
        aux->siguiente = nuevoNodo;
    }
}


void guardarListaEnArchivo(tListaContacto* lista, const char* nombreArchivo) {
    FILE* archivo = fopen(nombreArchivo, "wb");
    if (archivo == NULL) {
        printf("Error al abrir el archivo para escritura.\n");
        exit(EXIT_FAILURE);
    }

    tListaContacto* aux = lista;
    while (aux != NULL) {
        fwrite(&(aux->datosContacto), sizeof(tInfoContacto), 1, archivo);
        aux = aux->siguiente;
    }

    fclose(archivo);
}



tListaContacto* leerListaDesdeArchivo(const char* nombreArchivo) {
    FILE* archivo = fopen(nombreArchivo, "rb");
    if (archivo == NULL) {
        printf("Error al abrir el archivo para lectura.\n");
        return NULL;
    }

    tListaContacto* lista = NULL;
    tInfoContacto buffer;
    while (fread(&buffer, sizeof(tInfoContacto), 1, archivo) == 1) {
        insertarElemento(&lista, &buffer);
    }

    fclose(archivo);
    return lista;
}

void registrarNuevoContacto() {
    printf("\nIngrese la cantidad de contactos que desea agregar: ");
    scanf("%d", &cantidadContactos);
    
    for (int i = 0; i < cantidadContactos; i++) {
        tInfoContacto nuevoContacto;
        printf("\nIngrese el ID del contacto %d: ", i + 1);
        scanf("%d", &nuevoContacto.id);
        
        printf("Ingrese el nombre y apellido del contacto %d: ", i + 1);
        fflush(stdin);
        scanf("%[^\n]s", nuevoContacto.nombreApellido);
        
        printf("Ingrese el numero de telefono del contacto %d: ", i + 1);
        fflush(stdin);
        scanf("%[^\n]s", nuevoContacto.numeroTelefono);
        
        printf("Ingrese el sexo(1- varon, 2- mujer) del contacto %d: ", i + 1);
        scanf("%d", &nuevoContacto.sexo);
        
        printf("Ingrese la edad del contacto %d: ", i + 1);
        scanf("%d", &nuevoContacto.edad);
        
        printf("Ingrese el correo electronico del contacto %d: ", i + 1);
        fflush(stdin);
        scanf("%[^\n]s", nuevoContacto.correoElectronico);
        
        printf("Ingrese el domicilio del contacto %d: ", i + 1);
        fflush(stdin);
        scanf("%[^\n]s", nuevoContacto.domicilio);
        
        printf("Ingrese la fecha de cumple del contacto %d: ", i + 1);
        fflush(stdin);
		scanf("%[^\n]s", nuevoContacto.fechaCumple);
        
        printf("\n");
        agregarContacto(&(usuarios[usuarioActual].listaContacto), nuevoContacto);
    }
}



void mostrarListaContactos(tListaContacto* pListaContactosActual){
    printf("\n--- LISTA DE CONTACTOS ---\n");
    tListaContacto* aux = pListaContactosActual;
    int contador = 1;
    
    while(aux !=  NULL){
        printf("Contacto : %d\n", contador);
        printf("ID: %d\n", aux->datosContacto.id);
        printf("Nombre: %s\n", aux->datosContacto.nombreApellido);
        printf("Teléfono: %s\n", aux->datosContacto.numeroTelefono);
        printf("Sexo (1-Varón, 2-Mujer): %d\n", aux->datosContacto.sexo);
        printf("Edad: %d\n", aux->datosContacto.edad);
        printf("Correo electrónico: %s\n", aux->datosContacto.correoElectronico);
        printf("Domicilio: %s\n", aux->datosContacto.domicilio);
        printf("Fecha de cumpleaños: %s\n", aux->datosContacto.fechaCumple);
        printf("\n");
        
        aux = aux->siguiente;
        contador++;
    }
    printf("\n");
}

void eliminarContacto(tListaContacto* pListaContactosActual){
	if(pListaContactosActual == NULL){
		printf("\nLa lista de contactos esta vacia.\n");
	}else{
		int idEliminar;
		printf("\nIngrese el ID del contacto que desea eliminar: ");
		scanf("%d", &idEliminar);
		
		tListaContacto* actual = pListaContactosActual;
		tListaContacto* anterior = pListaContactosActual;
		
		while(actual != NULL && actual->datosContacto.id != idEliminar){
			anterior = actual;
			actual = actual->siguiente;
		}
		
		if(actual ==  NULL){
			printf("No se encontro al contacto con ID %d\n", idEliminar);
		}else{
			if(anterior == NULL){
				pListaContactosActual = actual->siguiente;
			}else{
				anterior->siguiente = actual->siguiente;
			}
			
			free(actual);
			printf("Contacto con ID %d eliminado correctamente\n", idEliminar);
		}
	}
}

void cambiarUsuario() {
    char nuevoNombre[MAX_LONGITUD_NOMBRE];
    printf("\nIngrese el nombre del usuario al que desea cambiar: ");
    scanf("%s", nuevoNombre);

    int encontrado = 0;
    for (int i = 0; i < MAX_USUARIOS; i++) {
        if (strcmp(usuarios[i].nombreUsuario, nuevoNombre) == 0) {
            usuarioActual = i;
            printf("\nCambio de usuario exitoso a %s.\n", nuevoNombre);
            encontrado = 1;
            break;
        }
    }

    if (!encontrado) {
        printf("\nUsuario no encontrado.\n");
    }
}

bool archivoExiste(const char* ruta) {
    FILE* archivo = fopen(ruta, "r");
    if (archivo) {
        fclose(archivo);
        return true;
    }
    return false;
}
